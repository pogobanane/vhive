// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeseriesClient is the client API for Timeseries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeseriesClient interface {
	// Invoker methods
	// ==============
	StartExperiment(ctx context.Context, in *ExperimentDefinition, opts ...grpc.CallOption) (*empty.Empty, error)
	EndExperiment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ExperimentResult, error)
}

type timeseriesClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeseriesClient(cc grpc.ClientConnInterface) TimeseriesClient {
	return &timeseriesClient{cc}
}

func (c *timeseriesClient) StartExperiment(ctx context.Context, in *ExperimentDefinition, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Timeseries/StartExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeseriesClient) EndExperiment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ExperimentResult, error) {
	out := new(ExperimentResult)
	err := c.cc.Invoke(ctx, "/Timeseries/EndExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeseriesServer is the server API for Timeseries service.
// All implementations must embed UnimplementedTimeseriesServer
// for forward compatibility
type TimeseriesServer interface {
	// Invoker methods
	// ==============
	StartExperiment(context.Context, *ExperimentDefinition) (*empty.Empty, error)
	EndExperiment(context.Context, *empty.Empty) (*ExperimentResult, error)
	mustEmbedUnimplementedTimeseriesServer()
}

// UnimplementedTimeseriesServer must be embedded to have forward compatible implementations.
type UnimplementedTimeseriesServer struct {
}

func (UnimplementedTimeseriesServer) StartExperiment(context.Context, *ExperimentDefinition) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExperiment not implemented")
}
func (UnimplementedTimeseriesServer) EndExperiment(context.Context, *empty.Empty) (*ExperimentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndExperiment not implemented")
}
func (UnimplementedTimeseriesServer) mustEmbedUnimplementedTimeseriesServer() {}

// UnsafeTimeseriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeseriesServer will
// result in compilation errors.
type UnsafeTimeseriesServer interface {
	mustEmbedUnimplementedTimeseriesServer()
}

func RegisterTimeseriesServer(s grpc.ServiceRegistrar, srv TimeseriesServer) {
	s.RegisterService(&Timeseries_ServiceDesc, srv)
}

func _Timeseries_StartExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesServer).StartExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Timeseries/StartExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesServer).StartExperiment(ctx, req.(*ExperimentDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timeseries_EndExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeseriesServer).EndExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Timeseries/EndExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeseriesServer).EndExperiment(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Timeseries_ServiceDesc is the grpc.ServiceDesc for Timeseries service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timeseries_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Timeseries",
	HandlerType: (*TimeseriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartExperiment",
			Handler:    _Timeseries_StartExperiment_Handler,
		},
		{
			MethodName: "EndExperiment",
			Handler:    _Timeseries_EndExperiment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timeseries.proto",
}
